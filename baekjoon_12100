#include <stdio.h>
#include <stdlib.h>

int N = 0;
int **arr;
int **op_check;

// 1:상 2:하 3:좌 4:우
int move(int case_arr)
{
	int i = 0;
	int j = 0;
	int k = 0;
	int zero_cnt = 0;
	int change_flag = 0;

	switch (case_arr)
	{
	case 1:
		for (i = 0; i < N; i++)
		{
			zero_cnt = 0;
			for (j = 0; j < N; j)
			{
				///////////////////////////////
				if (j + 1 < N)
				{
					if (arr[j][i] == arr[j + 1][i])
					{
						if (arr[j][i] == 0)
						{
							zero_cnt++;
							j++;
							continue;
						}
						else if (op_check[j][i] == 0 && op_check[j + 1][i] == 0)
						{
							arr[j][i] = arr[j][i] + arr[j + 1][i];
							arr[j + 1][i] = 0;
							op_check[j][i] = 1;
							change_flag = 1;
						}
					
						else
						{
							j++;
							continue;
						}
					}

					else if (arr[j][i] != arr[j + 1][i])
					{
						if (arr[j][i] == 0)
						{
							arr[j - zero_cnt][i] = arr[j][i] + arr[j + 1][i];
							arr[j + 1][i] = 0;
							zero_cnt = 0;
							change_flag = 1;
						}
						else
						{
							j++;
							continue;
						}
					}
				}
				else
				{
					j++;
					continue;
				}
			}
		}
		break;
	case 2:
		for (i = 0; i < N; i++)
		{
			zero_cnt = 0;
			for (j = 0; j < N; j)
			{
				///////////////////////////////
				if (j + 1 < N)
				{
					if (arr[j][i] == arr[j + 1][i])
					{
						if (arr[j][i] == 0)
						{
							zero_cnt++;
							j++;
							continue;
						}
						else if (op_check[j][i] == 0 && op_check[j + 1][i] == 0)
						{
							arr[j][i] = arr[j][i] + arr[j + 1][i];
							arr[j + 1][i] = 0;
							op_check[j][i] = 1;
							change_flag = 1;
						}

						else
						{
							j++;
							continue;
						}
					}

					else if (arr[j][i] != arr[j + 1][i])
					{
						if (arr[j][i] == 0)
						{
							arr[j - zero_cnt][i] = arr[j][i] + arr[j + 1][i];
							arr[j + 1][i] = 0;
							zero_cnt = 0;
							change_flag = 1;
						}
						else
						{
							j++;
							continue;
						}
					}
				}
				else
				{
					j++;
					continue;
				}
			}
		}
		break;
	case 3:
		for (i = 0; i < N; i++)
		{
			zero_cnt = 0;
			for (j = 0; j < N; j)
			{
				///////////////////////////////
				if (j + 1 < N)
				{
					if (arr[j][i] == arr[j + 1][i])
					{
						if (arr[j][i] == 0)
						{
							zero_cnt++;
							j++;
							continue;
						}
						else if (op_check[j][i] == 0 && op_check[j + 1][i] == 0)
						{
							arr[j][i] = arr[j][i] + arr[j + 1][i];
							arr[j + 1][i] = 0;
							op_check[j][i] = 1;
							change_flag = 1;
						}

						else
						{
							j++;
							continue;
						}
					}

					else if (arr[j][i] != arr[j + 1][i])
					{
						if (arr[j][i] == 0)
						{
							arr[j - zero_cnt][i] = arr[j][i] + arr[j + 1][i];
							arr[j + 1][i] = 0;
							zero_cnt = 0;
							change_flag = 1;
						}
						else
						{
							j++;
							continue;
						}
					}
				}
				else
				{
					j++;
					continue;
				}
			}
		}
		break;
	case 4:
		for (i = 0; i < N; i++)
		{
			zero_cnt = 0;
			for (j = 0; j < N; j)
			{
				///////////////////////////////
				if (j + 1 < N)
				{
					if (arr[j][i] == arr[j + 1][i])
					{
						if (arr[j][i] == 0)
						{
							zero_cnt++;
							j++;
							continue;
						}
						else if (op_check[j][i] == 0 && op_check[j + 1][i] == 0)
						{
							arr[j][i] = arr[j][i] + arr[j + 1][i];
							arr[j + 1][i] = 0;
							op_check[j][i] = 1;
							change_flag = 1;
						}

						else
						{
							j++;
							continue;
						}
					}

					else if (arr[j][i] != arr[j + 1][i])
					{
						if (arr[j][i] == 0)
						{
							arr[j - zero_cnt][i] = arr[j][i] + arr[j + 1][i];
							arr[j + 1][i] = 0;
							zero_cnt = 0;
							change_flag = 1;
						}
						else
						{
							j++;
							continue;
						}
					}
				}
				else
				{
					j++;
					continue;
				}
			}
		}
		break;
	default: break;
	}
	if (change_flag == 1)
	{
		move(case_arr);
	}
	return 0;
}

//int puls()
//{
//
//}

int main()
{
	int i = 0;
	int j = 0;
	int k = 0;
	int l = 0;
	int m = 0;
	int max = 0;
	int case_arr[5] = { 1,1,1,1,1 };

	scanf("%d", &N);

	arr = (int**)malloc(sizeof(int)*N);
	op_check = (int**)malloc(sizeof(int)*N);
	for (i = 0; i < N; i++)
	{
		arr[i] = (int*)malloc(sizeof(int)*N);
		op_check[i] = (int*)malloc(sizeof(int)*N);
	}


	for (i = 0; i < N; i++)
	{
		for (j = 0; j < N; j++)
		{
			arr[i][j] = 0;
			op_check[i][j] = 0;
			scanf("%d", &arr[i][j]);
		}
	}
	//for (i = 0; i < N; i++)
	//{
	//	for (j = 0; j < N; j++)
	//	{
	//		printf("%d ", arr[i][j]);
	//	}
	//	printf("\n");
	//}

	for (i = 1; i < 5; i++)
	{
		for (j = 1; j < 5; j++)
		{
			for (k = 1; k < 5; k++)
			{
				for (l = 1; l < 5; l++)
				{
					for (m = 1; m < 5; m++)
					{
						case_arr[0] = i;
						case_arr[1] = j;
						case_arr[2] = k;
						case_arr[3] = l;
						case_arr[4] = m;

						//printf("%d%d%d%d%d\n", case_arr[0], case_arr[1], case_arr[2], case_arr[3], case_arr[4]);
						for (i = 0; i < 5; i++)
						{
							if ((i - 1 >= 0 && i != 0) || (i == 0))
							{
								if (case_arr[i - 1] != case_arr[i])
									move(case_arr[i]);
							}
						}

					}
				}
			}
		}
	}

	printf("-------------------\n");
	for (i = 0; i < N; i++)
	{
		for (j = 0; j < N; j++)
		{
			if (arr[i][j] > max)
			{
				max = arr[i][j];
			}
		}
	}
	printf("%d", max);
	printf("end");
}

//int move(int case_arr)
//{
//	int i = 0;
//	int j = 0;
//	int k = 0;
//
//	switch (case_arr)
//	{
//	case 1:
//		for (j = 1; j < N; j++)
//		{
//			for (k = 0; k < N; k)
//			{
//				if ((arr[j - 1][k] == 0 || arr[j - 1][k] == arr[j][k]) && (op_check[j - 1][k] == 0 && op_check[j][k] == 0) && !(arr[j - 1][k] == 0 && arr[j][k] == 0))
//				{
//					arr[j - 1][k] = arr[j - 1][k] + arr[j][k];
//					arr[j][k] = 0;
//					op_check[j - 1][k] = 1;
//				}
//				if (j - 2 >= 0)
//				{
//					if (arr[j - 2][k] == 0 || (arr[j - 2][k] == arr[j - 1][k] && (op_check[j - 1][k] == 0 && op_check[j][k] == 0)))
//					{
//					}
//					else
//					{
//						if (op_check[j - 1][k] == 1 || arr[j - 1][k] != arr[j][k] || (arr[j - 1][k] == 0 && arr[j][k] == 0))
//						{
//							k++;
//						}
//					}
//				}
//				else
//				{
//
//				}
//			}
//		}
//		break;
//	case 2:
//		for (j = N - 1; j >= 0; j--)
//		{
//			for (k = 0; k < N; k++)
//			{
//				if ((arr[j + 1][k] == 0 || arr[j + 1][k] == arr[j][k]) && (op_check[j + 1][k] == 0 && op_check[j][k] == 0))
//				{
//					arr[j + 1][k] = arr[j + 1][k] + arr[j][k];
//					arr[j][k] = 0;
//					op_check[j + 1][k] = 1;
//				}
//			}
//		}
//		break;
//	case 3:
//		for (j = 0; j < N; j++)
//		{
//			for (k = 1; k < N; k++)
//			{
//				if ((arr[j][k - 1] == 0 || arr[j][k - 1] == arr[j][k]) && (op_check[j][k - 1] == 0 && op_check[j][k] == 0))
//				{
//					arr[j][k - 1] = arr[j][k - 1] + arr[j][k];
//					arr[j][k] = 0;
//					op_check[j][k - 1] = 1;
//				}
//			}
//		}
//		break;
//	case 4:
//		for (j = 0; j < N; j++)
//		{
//			for (k = N - 1; k >= 0; k--)
//			{
//				if ((arr[j][k + 1] == 0 || arr[j][k + 1] == arr[j][k]) && (op_check[j][k + 1] == 0 && op_check[j][k] == 0))
//				{
//					arr[j][k + 1] = arr[j][k + 1] + arr[j][k];
//					arr[j][k] = 0;
//					op_check[j][k + 1] = 1;
//				}
//			}
//		}
//		break;
//	default: break;
//	}
//	return 0;
//}
