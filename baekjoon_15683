#include <iostream>
#include <stdlib.h>

int N = 0;
int M = 0;
int arr[10][10] = { 0, };
int tmp[10][10] = { 0, };
int cnt[10][10] = { 0, };
int result = 1000000;

int check_zero()
{
	int zero_cnt = 0;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			if (tmp[i][j] == 0)
			{
				zero_cnt++;
			}
		}
	}
	return zero_cnt;
}

int draw_range(int i, int j)
{
	int tmp_i = 0;
	int tmp_j = 0;
	int tmp_result = 0;

	switch (arr[i][j])
	{
	//================================================================
	case 1:
		//------------------------------------------------------------
		if (cnt[i][j] == 0)
		{
			tmp_j = j;
			while (1)
			{
				tmp_j++;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}
		}
		//------------------------------------------------------------
		else if (cnt[i][j] == 1)
		{
			tmp_i = i;
			while (1)
			{
				tmp_i++;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}
		}
		//------------------------------------------------------------
		else if (cnt[i][j] == 2)
		{
			tmp_j = j;
			while (1)
			{
				tmp_j--;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}
		}
		//------------------------------------------------------------
		else if (cnt[i][j] == 3)
		{
			tmp_i = i;
			while (1)
			{
				tmp_i--;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}
		}
		break;
	//================================================================
	case 2:
		//------------------------------------------------------------
		if (cnt[i][j] == 0)
		{
			tmp_j = j; // 오른쪽 
			while (1) 
			{
				tmp_j++;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}

			tmp_j = j; // 왼쪽
			while (1) 
			{
				tmp_j--;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}
		}
		//------------------------------------------------------------
		else if (cnt[i][j] == 1)
		{
			tmp_i = i; // 아래
			while (1)
			{
				tmp_i++;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}

			tmp_i = i; // 위
			while (1)
			{
				tmp_i--;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}
		}
		//------------------------------------------------------------
		else if (cnt[i][j] == 2)
		{
			tmp_j = j; // 오른쪽 
			while (1) 
			{
				tmp_j++;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}

			tmp_j = j; // 왼쪽
			while (1) 
			{
				tmp_j--;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}
		}
		//------------------------------------------------------------
		else if (cnt[i][j] == 3)
		{
			tmp_i = i; // 아래
			while (1)
			{
				tmp_i++;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}

			tmp_i = i; // 위
			while (1)
			{
				tmp_i--;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}
		}
		//------------------------------------------------------------
		break;
	//================================================================
	case 3:
		//------------------------------------------------------------
		if (cnt[i][j] == 0)
		{
			tmp_i = i; // 위
			while (1)
			{
				tmp_i--;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}

			tmp_j = j; // 오른쪽 
			while (1) 
			{
				tmp_j++;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}
		}
		//------------------------------------------------------------
		else if (cnt[i][j] == 1)
		{
			tmp_j = j; // 오른쪽 
			while (1) 
			{
				tmp_j++;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}

			tmp_i = i; // 아래
			while (1)
			{
				tmp_i++;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}
		}
		//------------------------------------------------------------
		else if (cnt[i][j] == 2)
		{
			tmp_i = i; // 아래
			while (1)
			{
				tmp_i++;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}
			 
			tmp_j = j; // 왼쪽
			while (1) 
			{
				tmp_j--;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}
		}
		//------------------------------------------------------------
		else if (cnt[i][j] == 3)
		{
			tmp_j = j; // 왼쪽
			while (1)
			{
				tmp_j--;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}

			tmp_i = i; // 위
			while (1)
			{
				tmp_i--;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}
		}
		break;
	//================================================================
	case 4:
		//------------------------------------------------------------
		if (cnt[i][j] == 0)
		{
			tmp_j = j; // 왼쪽
			while (1)
			{
				tmp_j--;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}

			tmp_i = i; // 위
			while (1)
			{
				tmp_i--;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}

			tmp_j = j; // 오른쪽 
			while (1)
			{
				tmp_j++;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}
		}
		//------------------------------------------------------------
		else if (cnt[i][j] == 1)
		{
			tmp_i = i; // 위
			while (1)
			{
				tmp_i--;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}

			tmp_j = j; // 오른쪽 
			while (1)
			{
				tmp_j++;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}

			tmp_i = i; // 아래
			while (1)
			{
				tmp_i++;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}
		}
		//------------------------------------------------------------
		else if (cnt[i][j] == 2)
		{
			tmp_j = j; // 오른쪽 
			while (1)
			{
				tmp_j++;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}

			tmp_i = i; // 아래
			while (1)
			{
				tmp_i++;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}

			tmp_j = j; // 왼쪽
			while (1)
			{
				tmp_j--;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}
		}
		//------------------------------------------------------------
		else if (cnt[i][j] == 3)
		{
			tmp_i = i; // 아래
			while (1)
			{
				tmp_i++;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}

			tmp_j = j; // 왼쪽
			while (1)
			{
				tmp_j--;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}

			tmp_i = i; // 위
			while (1)
			{
				tmp_i--;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}
		}
		break;
	//================================================================
	case 5:
		//------------------------------------------------------------
		if (cnt[i][j] == 0)
		{
			tmp_i = i; // 위
			while (1)
			{
				tmp_i--;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}

			tmp_j = j; // 오른쪽 
			while (1)
			{
				tmp_j++;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}

			tmp_i = i; // 아래
			while (1)
			{
				tmp_i++;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}

			tmp_j = j; // 왼쪽
			while (1)
			{
				tmp_j--;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}
		}
		//------------------------------------------------------------
		else if (cnt[i][j] == 1)
		{
			tmp_i = i; // 위
			while (1)
			{
				tmp_i--;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}

			tmp_j = j; // 오른쪽 
			while (1)
			{
				tmp_j++;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}

			tmp_i = i; // 아래
			while (1)
			{
				tmp_i++;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}

			tmp_j = j; // 왼쪽
			while (1)
			{
				tmp_j--;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}
		}
		//------------------------------------------------------------
		else if (cnt[i][j] == 2)
		{
			tmp_i = i; // 위
			while (1)
			{
				tmp_i--;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}

			tmp_j = j; // 오른쪽 
			while (1)
			{
				tmp_j++;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}

			tmp_i = i; // 아래
			while (1)
			{
				tmp_i++;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}

			tmp_j = j; // 왼쪽
			while (1)
			{
				tmp_j--;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}
		}
		//------------------------------------------------------------
		else if (cnt[i][j] == 3)
		{
			tmp_i = i; // 위
			while (1)
			{
				tmp_i--;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}

			tmp_j = j; // 오른쪽 
			while (1)
			{
				tmp_j++;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}

			tmp_i = i; // 아래
			while (1)
			{
				tmp_i++;

				if (tmp_i < 0 || tmp_i > M || tmp[tmp_i][j] == 6)
					break;

				tmp[tmp_i][j] = 9;
			}

			tmp_j = j; // 왼쪽
			while (1)
			{
				tmp_j--;

				if (tmp_j < 0 || tmp_j > M || tmp[i][tmp_j] == 6)
					break;

				tmp[i][tmp_j] = 9;
			}
		}
		break;
	}


	//printf("--------------------------------------------------------\n");
	//for (int m = 0; m < N; m++)
	//{
	//	for (int l = 0; l < M; l++)
	//	{
	//		printf("%d ", tmp[m][l]);
	//	}
	//	printf("\n");
	//}

	tmp_result = check_zero();
	if (tmp_result < result)
	{
		result = tmp_result;
	}

	return 0;
}

int find_cctv(int i, int j)
{
	int tmp_cnt[10][10] = { 0, };
	int first_i = i;
	int tmp_tmp[10][10] = { 0, };

	if (i >= N || j >= M)
		return 0;

	for (int l = 0; l < N; l++)
	{
		for (int n = 0; n < M; n++)
		{
			tmp_tmp[l][n] = tmp[l][n];
		}
	}

	for (i = i; i < N; i++)
	{
		if (i != first_i)
			j = 0;

		for (j = j; j < M; j++)
		{
			if (arr[i][j] != 0 && arr[i][j] != 6)
			{
				for (int m = 0; m < 4; m++)
				{
					for (int l = 0; l < N; l++)
					{
						for (int n = 0; n < M; n++)
						{
							tmp[l][n] = tmp_tmp[l][n];
						}
					}
					if (cnt[i][j] != 4)
					{
						draw_range(i, j);
						if (j < M)
						{
							for (int l = 0; l < N; l++)
							{
								for (int n = 0; n < M; n++)
								{
									tmp_cnt[l][n] = cnt[l][n];
								}
							}
							find_cctv(i, j + 1);
							for (int l = 0; l < N; l++)
							{
								for (int n = 0; n < M; n++)
								{
									cnt[l][n] = tmp_cnt[l][n];
								}
							}
						}
						else if (j == M && i < N)
						{
							for (int l = 0; l < N; l++)
							{
								for (int n = 0; n < M; n++)
								{
									tmp_cnt[l][n] = cnt[l][n];
								}
							}
							find_cctv(i + 1, 0);
							for (int l = 0; l < N; l++)
							{
								for (int n = 0; n < M; n++)
								{
									cnt[l][n] = tmp_cnt[l][n];
								}
							}
						}

						cnt[i][j]++;
					}
				}
			}
		}
	}

	return 0;
}



int main()
{
	int i = 0;
	int j = 0;

	scanf("%d %d", &N, &M);

	for (i = 0; i < N; i++)
	{
		for (j = 0; j < M; j++)
		{
			scanf("%d", &arr[i][j]);
			tmp[i][j] = arr[i][j];
		}
	}

	//for (int i = 0; i < N; i++)
	//{
	//	for (int j = 0; j < M; j++)
	//	{
	//		printf("%d ", arr[i][j]);
	//	}
	//	printf("\n");
	//}
	find_cctv(0, 0);

	printf("%d", result);
	//printf("end");
}
