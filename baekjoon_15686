#include <iostream>
#include <stdlib.h>
#include <math.h>

int N = 0;
int M = 0;

int map[51][51] = { 0, };

int home_map[51 * 51][2] = { 0, };
int home_map_distance[51 * 51] = { 51*51, };
int home_cnt = 0;
int chi_map[51 * 51][2] = { 0, };
int chi_cnt = 0;

int d_chi_cnt = 0;
int result_sum = 51 * 51;

int chi_distance(int a, int b, int c, int d)
{
	return abs(a - c) + abs(b - d);
}

int sum_chi_distance(int arr[51 * 51])
{
	int i = 0;
	int sum = 0;

	for (i = 0; i < home_cnt; i++)
	{
		sum = sum + arr[i];
	}

	return sum;
}


int calc(int delete_chi[][2])
{
	int i = 0;
	int j = 0;
	int l = 0;
	int c_sum = 0;
	int temp_distance = 0;
	int temp_home_distance[51 * 51] = { 0, };
	int flag = 0;

	for (i = 0; i < 51 * 51; i++)
		temp_home_distance[i] = 9999;

	if (d_chi_cnt == 0)
	{
		for (i =0; i < chi_cnt; i++)
		{
			for (j = 0; j < home_cnt; j++)
			{
				temp_distance = chi_distance(chi_map[i][0], chi_map[i][1], home_map[j][0], home_map[j][1]);
				if (temp_distance < temp_home_distance[j])
				{
					temp_home_distance[j] = temp_distance;
				}
			}
		}
	}
	else
	{
		for (i = 0; i < chi_cnt; i++)
		{
			flag = 0;
			for (l = 0; l < d_chi_cnt; l++)
			{
				if (chi_map[i][0] == delete_chi[l][0] && chi_map[i][1] == delete_chi[l][1])
				{
					flag = 1;
					break;
				}
			}
			if (flag == 1)
				continue;
			for (j = 0; j < home_cnt; j++)
			{
				temp_distance = chi_distance(chi_map[i][0], chi_map[i][1], home_map[j][0], home_map[j][1]);
				if (temp_distance < temp_home_distance[j])
				{
					temp_home_distance[j] = temp_distance;
				}
			}
		}
	}
	c_sum = sum_chi_distance(temp_home_distance);
	return c_sum;
}


int delete_store(int delete_num, int delete_chi[][2], int i)
{
	int d_sum = 0;


	if (delete_num==0)
	{
		d_sum = calc(delete_chi);
		if (d_sum < result_sum)
		{
			result_sum = d_sum;
		}
		return 0; // 이전 깊이의 재귀로
	}

	for (i = i; i < chi_cnt; i++)
	{
		delete_chi[d_chi_cnt][0] = chi_map[i][0];
		delete_chi[d_chi_cnt++][1] = chi_map[i][1];
		delete_store(delete_num - 1, delete_chi,i+1);
		d_chi_cnt--;
		delete_chi[d_chi_cnt][0] =0;
		delete_chi[d_chi_cnt][1] =0;
	}

	return 0; // main 으로
}

int main()
{
	int i = 0;
	int j = 0;
	int temp_distance = 0;
	int delete_chi[51 * 51][2] = { 9999, 9999 };
	int delete_num = 0;

	for (i = 0; i < 51*51; i++)
			home_map_distance[i] = 9999;

	scanf("%d %d", &N, &M);
	
	for (i = 1; i <= N; i++)
	{
		for (j = 1; j <= N; j++)
		{
			scanf("%d", &map[i][j]);
			if (map[i][j] == 2)
			{
				chi_map[chi_cnt][0] = i;
				chi_map[chi_cnt++][1] = j;
			}
			if (map[i][j] == 1)
			{
				home_map[home_cnt][0] = i;
				home_map[home_cnt++][1] = j;
			}
		}
	}

	delete_num = chi_cnt - M;

	delete_store(delete_num, delete_chi,0);
	printf("%d", result_sum);
}
