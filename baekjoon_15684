include <iostream>
#include <stdlib.h>
#include <string.h>

int N = 0;
int M = 0;  // 각각 가로선 개수
int H = 0;  // 총 가로선 개수

int a[30] = { 0, };
int b[30] = { 0, };

int radder[30][9] = { 0, }; // 최대 세로선 개수 10 , 최대 가로선 개수 30
int map[30][9 * 2 + 1] = { 0, };

int new_cnt = 0; // 현재 추가된 가로선 개수
int result_flag = 0;

int check() // i가 i에 오는지 확인
{
	int i = 0;
	int j = 0;
	int tmp_i = 0;
	int flag[10] = { 0, };
	int result = 1;
	int k = 0;
	int l = 0;
	int tmp_map[30][9 * 2 + 1] = { 0, };

	for(i=0;i<30;i++)
		memset(map[i], 0, sizeof(int)*19);
	//for (i = 0; i < H; i++)
	//{
	//	for (j = 0; j < N * 2 - 1; j++)
	//	{
	//		map[i][j] = 0;
	//	}
	//}

	for (i = 0; i < H; i++)
	{
		for (j = 0; j < N - 1; j++)
		{
			if (radder[i][j] == 1)
			{
				map[i][(2 * j) + 1] = 1;
				//tmp_map[i][(2 * j) + 1] = 1;
			}
		}
	}

	//printf("/////////////////////////////////////////////\n");
	//for (i = 0; i < H; i++)
	//{
	//	for (j = 0; j < N * 2 - 1; j++)
	//	{
	//		printf("%d ", map[i][j]);
	//	}
	//	printf("\n");
	//}

	for (i = 1; i <= N * 2 - 1; i = i + 2)
	{
		j = 0;
		tmp_i = i - 1;
		memcpy(tmp_map, map, sizeof(int)*(9 * 2 + 1) * 30);
		/*for (k = 0; k < H; k++)
		{
			for (l = 0; l < N * 2 - 1; l++)
			{
				tmp_map[k][l] = map[k][l];
			}
		}*/
		while (1)
		{
			if (j == H)
			{
				if (i - 1 == tmp_i)
				{
					flag[i] = 1;
				}
				else
				{
					return 0;
				}
				break;
			}

			if (tmp_map[j][tmp_i + 1] == 1 && tmp_i + 1 < 2 * N - 1)// 오른쪽
			{
				tmp_map[j][tmp_i] = 2;
				tmp_i = tmp_i + 2;
				j++;
			}
			else if (tmp_map[j][tmp_i - 1] == 1 && tmp_i - 1 > 0) // 왼쪽
			{
				tmp_map[j][tmp_i] = 2;
				tmp_i = tmp_i - 2;
				j++;
			}
			else
			{
				tmp_map[j][tmp_i] = 2;
				j++;
			}

			//printf("=============================================\n");
			//for (k = 0; k < H; k++)
			//{
			//	for (l = 0; l < N * 2 - 1; l++)
			//	{
			//		printf("%d ", tmp_map[k][l]);
			//	}
			//	printf("\n");
			//}
		}
	}

	for (i = 1; i < N * 2 - 1; i = i + 2)
	{
		result = result * flag[i];
	}
	return result;
}

int make_radder(int m_i, int m_j, int new_num)
{
	int i = 0;
	int j = 0;
	int tmp_j = 0;
	int correct = 0;

	if (new_cnt == new_num)
	{
		//printf("----------------------------------------\n");
		//for (i = 0; i < H; i++)
		//{
		//	for (j = 0; j < N - 1; j++)
		//	{
		//		printf("%d ", radder[i][j]);
		//	}
		//	printf("\n");
		//}
		correct = check();
		if (correct != 0)
		{
			result_flag = 1;
		}
		return 0;
	}

	for (i = m_i; i < H; i++)
	{
		for (j = tmp_j; j < N - 1; j++)
		{
			if (radder[i][j] == 0)
			{
				if (radder[i][j - 1])
				{

				}
			}
			if (radder[i][j] == 0 && radder[i][j - 1] == 0 && radder[i][j + 1] == 0 && j + 1 < N - 1 && j - 1 >= 0) // 3개다 0이고 가운데 사다리 놓는경우
			{
				radder[i][j] = 1;
				new_cnt++;
				make_radder(i, j, new_num);
				new_cnt--;
				radder[i][j] = 0;
				if (result_flag == 1)
				{
					return 0;
				}
			}
			else if (radder[i][j] == 0 && j == 0 && radder[i][j + 1] == 0)
			{
				radder[i][j] = 1;
				new_cnt++;
				make_radder(i, j, new_num);
				new_cnt--;
				radder[i][j] = 0;
				if (result_flag == 1)
				{
					return 0;
				}
			}
			else if (radder[i][j] == 0 && j == N - 2 && radder[i][j - 1] == 0)
			{
				radder[i][j] = 1;
				new_cnt++;
				make_radder(i, j, new_num);
				new_cnt--;
				radder[i][j] = 0;
				if (result_flag == 1)
				{
					return 0;
				}
			}
		}
		tmp_j = 0;
	}

	return 0;
}


int main()
{
	int i = 0;
	int j = 0;
	int total_case_num = 0;
	scanf("%d %d %d", &N, &M, &H);

	for (i = 0; i < M; i++)
	{
		scanf("%d %d", &a[i], &b[i]);
		radder[a[i] - 1][b[i] - 1] = 1;
	}

	//for (i = 0; i < H; i++)
	//{
	//	for (j = 0; j < N-1; j++)
	//	{
	//		printf("%d ", radder[i][j]);
	//	}
	//	printf("\n");
	//}

	for (i = 0; i < 4; i++)
	{
		make_radder(0, 0, i);
		if (result_flag == 1)
			break;
	}

	if (result_flag == 0)
	{
		printf("%d", -1);
	}
	else
	{
		if (i > 3)
		{
			printf("%d", -1);
		}
		else if (i <= 3)
		{
			printf("%d", i);
		}
	}

	printf("end");

}
