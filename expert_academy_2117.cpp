#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string.h>

int N=0, M = 0;
int max_house = 1;
int map[40][40] = { 0, };
int max_mask_size[21] = { 0,0,0,0,0,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10 };
						 //0 1 2 3 4 5 6 7 8 9 1011121314151617181920

int mask2[3][3] = { { 0,1,0 } ,{ 1, 1, 1 } ,{ 0, 1, 0 } };
int mask3[5][5] = { { 0,0,1,0,0 },{ 0,1,1,1,0 },{ 1,1,1,1,1 },{ 0,1,1,1,0 },{ 0,0,1,0,0 } };
int mask4[7][7] = { { 0,0,0,1,0,0,0 },{ 0,0,1,1,1,0,0 },{ 0,1,1,1,1,1,0 },{ 1,1,1,1,1,1,1 },{ 0,1,1,1,1,1,0 },{ 0,0,1,1,1,0,0 },{ 0,0,0,1,0,0,0 } };
int mask5[9][9] =
{ { 0,0,0,0,1,0,0,0,0 },
{ 0,0,0,1,1,1,0,0,0 },
{ 0,0,1,1,1,1,1,0,0 },
{ 0,1,1,1,1,1,1,1,0 },
{ 1,1,1,1,1,1,1,1,1 },
{ 0,1,1,1,1,1,1,1,0 },
{ 0,0,1,1,1,1,1,0,0 },
{ 0,0,0,1,1,1,0,0,0 },
{ 0,0,0,0,1,0,0,0,0 } };
int mask6[11][11] =
{ { 0,0,0,0,0,1,0,0,0,0,0 },
{ 0,0,0,0,1,1,1,0,0,0,0 },
{ 0,0,0,1,1,1,1,1,0,0,0 },
{ 0,0,1,1,1,1,1,1,1,0,0 },
{ 0,1,1,1,1,1,1,1,1,1,0 },
{ 1,1,1,1,1,1,1,1,1,1,1 },
{ 0,1,1,1,1,1,1,1,1,1,0 },
{ 0,0,1,1,1,1,1,1,1,0,0 },
{ 0,0,0,1,1,1,1,1,0,0,0 },
{ 0,0,0,0,1,1,1,0,0,0,0 },
{ 0,0,0,0,0,1,0,0,0,0,0 } };
int mask7[13][13] =
{ { 0,0,0,0,0,0,1,0,0,0,0,0,0 },
{ 0,0,0,0,0,1,1,1,0,0,0,0,0 },
{ 0,0,0,0,1,1,1,1,1,0,0,0,0 },
{ 0,0,0,1,1,1,1,1,1,1,0,0,0 },
{ 0,0,1,1,1,1,1,1,1,1,1,0,0 },
{ 0,1,1,1,1,1,1,1,1,1,1,1,0 },
{ 1,1,1,1,1,1,1,1,1,1,1,1,1 },
{ 0,1,1,1,1,1,1,1,1,1,1,1,0 },
{ 0,0,1,1,1,1,1,1,1,1,1,0,0 },
{ 0,0,0,1,1,1,1,1,1,1,0,0,0 },
{ 0,0,0,0,1,1,1,1,1,0,0,0,0 },
{ 0,0,0,0,0,1,1,1,0,0,0,0,0 },
{ 0,0,0,0,0,0,1,0,0,0,0,0,0 } };

int mask8[15][15] =
{ { 0,0,0,0,0,0,0,1,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,1,1,1,0,0,0,0,0,0 },
{ 0,0,0,0,0,1,1,1,1,1,0,0,0,0,0 },
{ 0,0,0,0,1,1,1,1,1,1,1,0,0,0,0 },
{ 0,0,0,1,1,1,1,1,1,1,1,1,0,0,0 },
{ 0,0,1,1,1,1,1,1,1,1,1,1,1,0,0 },
{ 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0 },
{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
{ 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0 },
{ 0,0,1,1,1,1,1,1,1,1,1,1,1,0,0 },
{ 0,0,0,1,1,1,1,1,1,1,1,1,0,0,0 },
{ 0,0,0,0,1,1,1,1,1,1,1,0,0,0,0 },
{ 0,0,0,0,0,1,1,1,1,1,0,0,0,0,0 },
{ 0,0,0,0,0,0,1,1,1,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,1,0,0,0,0,0,0,0 } };
int mask9[17][17] =
{ { 0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0 },
{ 0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0 },
{ 0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0 },
{ 0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0 },
{ 0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0 },
{ 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0 },
{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
{ 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0 },
{ 0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0 },
{ 0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0 },
{ 0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0 },
{ 0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0 },
{ 0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0 } };
int mask10[19][19] =
{ { 0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0 },
{ 0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0 },
{ 0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0 },
{ 0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0 },
{ 0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0 },
{ 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0 },
{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
{ 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0 },
{ 0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0 },
{ 0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0 },
{ 0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0 },
{ 0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0 },
{ 0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0 } };

int conv(int mask_k) {

	int	max_cost = M - 1;
	int house_num = 0;
	int tmp_cost = 0;
	int t_mask[361] = { 0, };
	switch (mask_k) {
	case 2:	memcpy(t_mask, mask2,sizeof(mask2)); break;
	case 3: memcpy(t_mask, mask3, sizeof(mask3)); break;
	case 4:	memcpy(t_mask, mask4, sizeof(mask4)); break;
	case 5: memcpy(t_mask, mask5, sizeof(mask5)); break;
	case 6: memcpy(t_mask, mask6, sizeof(mask6)); break;
	case 7: memcpy(t_mask, mask7, sizeof(mask7)); break;
	case 8: memcpy(t_mask, mask8, sizeof(mask8)); break;
	case 9: memcpy(t_mask, mask9, sizeof(mask9)); break;
	case 10:memcpy(t_mask, mask10, sizeof(mask10)); break;
	}
	for (int m = 0; m < N; m++) {
		for (int n = 0; n < N; n++) {
			house_num = 0;
			for (int j = 0; j < 2* mask_k -1; j++) {
				for (int l = 0; l < 2* mask_k -1; l++) {
					house_num = house_num + ( t_mask[(2*mask_k-1)*j+l] * map[j - (mask_k - 1) + m + 10][l - (mask_k - 1) + n + 10] );
				}
			}
			tmp_cost = mask_k*mask_k + (mask_k - 1)*(mask_k - 1);
			if (tmp_cost < house_num * M) {
				if (max_house < house_num) {
					max_house = house_num;
				}
			}
		}
	}
	return 0;
}

int main() {
	int i = 0, j = 0, l = 0;
	int T = 0;
	scanf("%d", &T);
	for (i = 0; i < T; i++) {
		memset(map,0, sizeof(map));
		max_house = 1;

		scanf("%d %d", &N, &M);
		for (j = 0; j < N; j++) {
			for (l = 0; l < N; l++) {
				scanf("%d", &map[j+10][l+10]);
			}
		}
			
		// 면적 N을 통해서 최대 마스크 크기 판단 //최대 K 판단
		int max_size = max_mask_size[N];
		for (int k = 2; k <= max_size; k++) {
				conv(k);
		}
		printf("%d\n", max_house);
	}

	return 0;
}