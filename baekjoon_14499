#include <stdio.h>

int arr[20][20] = { 0, };
int instruct[1000] = { 0, };
int top = 0;
int bottom = 0;
int front = 0;
int behind = 0;
int left = 0;
int right = 0;
int Last_i = 0;

int N = 0;
int M = 0;
int K = 0;

int cur_x = 0;
int cur_y = 0;

int move(int pointing)
{
	int tmp_right = 0;
	int tmp_left = 0;
	int tmp_front = 0;
	int tmp_behind = 0;
	int tmp_top = 0;
	int tmp_bottom = 0;

	switch (pointing)
	{
	case 1 :
		if (cur_x + 1 < M)
		{
			cur_x = cur_x + 1;

			tmp_right = top;
			tmp_left = bottom;
			tmp_top = left;

			if (arr[cur_y][cur_x] == 0)
			{
				arr[cur_y][cur_x] = right;
			}
			bottom = arr[cur_y][cur_x];
			arr[cur_y][cur_x] = 0;

			top = tmp_top;
			left = tmp_left;
			right = tmp_right;

			if (Last_i == 0)
			{
				printf("%d", top);
			}
			else
			{
				printf("\n%d", top);
			}

		}
		break;

	case 2 :
		if (cur_x - 1 >= 0)
		{
			cur_x = cur_x - 1;

			tmp_right = bottom;
			tmp_left = top;
			tmp_top = right;

			if (arr[cur_y][cur_x] == 0)
			{
				arr[cur_y][cur_x] = left;
			}

			bottom = arr[cur_y][cur_x];
			arr[cur_y][cur_x] = 0;

			top = tmp_top;
			left = tmp_left;
			right = tmp_right;
			if (Last_i == 0)
			{
				printf("%d", top);
			}
			else
			{
				printf("\n%d", top);
			}
		}
		break;

	case 3 :
		if (cur_y - 1 >= 0)
		{
			cur_y = cur_y - 1;

			tmp_behind = top;
			tmp_front = bottom;
			tmp_top = front;



			if (arr[cur_y][cur_x] == 0)
			{
				arr[cur_y][cur_x] = behind;
			}
			bottom = arr[cur_y][cur_x];
			arr[cur_y][cur_x] = 0;

			top = tmp_top;
			front = tmp_front;
			behind = tmp_behind;
			if (Last_i == 0)
			{
				printf("%d", top);
			}
			else
			{
				printf("\n%d", top);
			}
		}
		  break;

	case 4 :
		if (cur_y + 1 < N)
		{
			cur_y = cur_y + 1;

			tmp_behind = bottom;
			tmp_front = top;
			tmp_top = behind;


			if (arr[cur_y][cur_x] == 0)
			{
				arr[cur_y][cur_x] = front;
			}
			bottom = arr[cur_y][cur_x];
			arr[cur_y][cur_x] = 0;

			top = tmp_top;
			front = tmp_front;
			behind = tmp_behind;

			if (Last_i == 0)
			{
				printf("%d", top);
			}
			else
			{
				printf("\n%d", top);
			}
		}
		  break;

	default: break;

	}
	return 0;
}

int main()
{
	int i = 0;
	int j = 0;
	int r = 0;
	int c = 0;

	//FILE *fp;
	//fp = fopen("input.txt", "r");

	//fscanf(fp,"%d %d %d %d %d", &N, &M, &cur_x, &cur_y, &K);
	scanf("%d %d %d %d %d", &N, &M, &cur_y, &cur_x, &K);
	//printf("%d %d %d %d %d", N, M, X, Y, K);

	for (i = 0; i < N; i++)
	{
		for (j = 0; j < M; j++)
		{
			//fscanf(fp, "%d", &arr[i][j]);
			scanf("%d", &arr[i][j]);
		}
	}
	//-------------------------------------------------------
	/*for (i = 0; i < N; i++)
	{
		for (j = 0; j < M; j++)
		{
			printf("%d ", arr[i][j]);
		}
		printf("\n");
	}*/
	//-------------------------------------------------------
	for (i = 0; i < K; i++)
	{
		//fscanf(fp, "%d", &instruct[i]);
		scanf("%d", &instruct[i]);
		//printf("%d ", instruct[i]);
	}
	//printf("\n");
	//-------------------------------------------------------

	for (Last_i = 0; Last_i < K; Last_i++)
	{
		move(instruct[Last_i]);

		//printf("inst :%d  top : %d bottom : %d  left : %d right : %d  frond : %d behind : %d \n", instruct[i], top, bottom, left, right, front, behind);

	}



	printf("\nend");
}
